from AutoIt2Library import autoit
from AutoIt2Library.keywords import ornament


class _AutoIt:
    @ornament.execute_its_own_function(autoit)
    def clip_get(self, buf_size=256):
        """

        :param buf_size:
        :return:
        """

    @ornament.execute_its_own_function(autoit)
    def clip_put(self, value):
        """

        :param value:
        :return:
        """

    @ornament.execute_its_own_function(autoit)
    def is_admin(self, ):
        """

        :return:
        """

    @ornament.execute_its_own_function(autoit)
    def drive_map_add(self, device, share, flag=0, user="", pwd="", buf_size=256):
        """

        :param device:
        :param share:
        :param flag: 0 = default
            1 = Persistant mapping
            8 = Show authentication dialog if required
        :param user:
        :param pwd:
        :param buf_size:
        :return:
        """

    @ornament.execute_its_own_function(autoit)
    def drive_map_del(self, device):
        """

        :param device:
        :return:
        """

    @ornament.execute_its_own_function(autoit)
    def drive_map_get(self, device, buf_size=256):
        """

        :param device:
        :param buf_size:
        :return:
        """

    @ornament.execute_its_own_function(autoit)
    def mouse_click(self, button="left", x=autoit.INTDEFAULT, y=autoit.INTDEFAULT, clicks=1, speed=-1):
        """

        :param button:
        :param x:
        :param y:
        :param clicks:
        :param speed:
        :return:
        """

    @ornament.execute_its_own_function(autoit)
    def mouse_click_drag(self, x1, y1, x2, y2, button="left", speed=-1):
        """

        :param x1:
        :param y1:
        :param x2:
        :param y2:
        :param button:
        :param speed:
        :return:
        """

    @ornament.execute_its_own_function(autoit)
    def mouse_down(self, button="left"):
        """

        :param button:
        :return:
        """

    @ornament.execute_its_own_function(autoit)
    def mouse_get_cursor(self, ):
        """

        :return:
        """

    @ornament.execute_its_own_function(autoit)
    def mouse_get_pos(self, ):
        """

        :return:
        """

    @ornament.execute_its_own_function(autoit)
    def mouse_move(self, x, y, speed=-1):
        """

        :param x:
        :param y:
        :param speed:
        :return:
        """

    @ornament.execute_its_own_function(autoit)
    def mouse_up(self, button="left"):
        """

        :param button:
        :return:
        """

    @ornament.execute_its_own_function(autoit)
    def mouse_wheel(self, direction, clicks=-1):
        """

        :param direction: "up" or "down"
        :param clicks:
        :return:
        """

    @ornament.execute_its_own_function(autoit)
    def opt(self, option, value):
        """

        :param option:
        :param value:
        :return:
        """

    @ornament.execute_its_own_function(autoit)
    def pixel_checksum(self, left, top, right, bottom, step=1):
        """

        :param left:
        :param top:
        :param right:
        :param bottom:
        :param step:
        :return:
        """

    @ornament.execute_its_own_function(autoit)
    def pixel_get_color(self, x, y):
        """

        :param x:
        :param y:
        :return:
        """

    @ornament.execute_its_own_function(autoit)
    def pixel_search(self, left, top, right, bottom, col, var=1, step=1):
        """

        :param left:
        :param top:
        :param right:
        :param bottom:
        :param col:
        :param var:
        :param step:
        :return:
        """

    @ornament.execute_its_own_function(autoit)
    def send(self, send_text, mode=0):
        """
        Sends simulated keystrokes to the active window.
        :param send_text:
        :param mode: Changes how "keys" is processed:
            flag = 0 (self, default), Text contains special characters like + and ! to
             indicate SHIFT and ALT key presses.
            flag = 1, keys are sent raw.
        :return:
        """

    @ornament.execute_its_own_function(autoit)
    def tooltip(self, tip, x=autoit.INTDEFAULT, y=autoit.INTDEFAULT):
        """

        :param tip:
        :param x:
        :param y:
        :return:
        """
