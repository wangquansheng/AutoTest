from functools import wraps
import datetime
import time
from inspect import getfullargspec, unwrap
from robot.api import logger


def execute_its_own_function(target):
    def _func(func):
        @wraps(func)
        def _fun(self, *args, **kwargs):
            if hasattr(target, func.__name__):
                fun = getattr(target, func.__name__)
                ar = getfullargspec(unwrap(fun)).args
                if "handle" in ar:
                    self.handle = args[ar.index("handle")]
                if "title" in ar:
                    self.handle = args[ar.index("title")]
                start_time = datetime.datetime.now()
                waiting_time = datetime.timedelta(seconds=self.waiting_time)
                while True:
                    try:
                        data = fun(*args, **kwargs)
                        ar = [str(i) for i in args]
                        value = ", ".join(ar)
                        kw = [str(i) for i in kwargs]
                        value += ", ".join(kw)
                        logger.info(f"{func.__name__}:{value}", html=True)
                        return data
                        break
                    except Exception as e:
                        time.sleep(self.intervals)
                        end_time = datetime.datetime.now()
                        if end_time - start_time > waiting_time:
                            self.handle = None
                            raise Exception(e)

        return _fun

    return _func


def singleton_mode(cls):
    """
    单例模式
    :param cls:
    :return:
    """
    example_data = []
    cls_data = []

    @wraps(cls)
    def _cls(*args, **kwargs):
        nonlocal example_data, cls_data
        if args or kwargs:
            if (*args, kwargs) not in example_data:
                example_data.append((*args, kwargs))
                cls_data.append(cls(*args, **kwargs))
            return cls_data[example_data.index((*args, kwargs))]
        else:
            if not cls_data:
                cls_data.append(cls())
            return cls_data[0]

    return _cls
