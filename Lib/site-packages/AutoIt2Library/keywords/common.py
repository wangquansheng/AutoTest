from robot.libraries.BuiltIn import BuiltIn, RobotNotRunningError
import os
from robotlibcore import PY2
from AutoIt2Library.keywords import ornament
from robot.api import logger
from robot.utils import get_link_path


class _SafeFormatter(dict):

    def __missing__(self, key):
        return '{%s}' % key


@ornament.singleton_mode
class _screenshot:

    @property
    def log_dir(self):
        try:
            logfile = BuiltIn().get_variable_value('${LOG FILE}')
            if logfile == 'NONE':
                return BuiltIn().get_variable_value('${OUTPUTDIR}')
            return os.path.dirname(logfile)
        except RobotNotRunningError:
            return os.getcwdu() if PY2 else os.getcwd()

    def _format_path(self, file_path, index):
        if PY2:
            import string
            return string.Formatter().vformat(file_path, (), _SafeFormatter(index=index))
        return file_path.format_map(_SafeFormatter(index=index))

    def _get_screenshot_path(self, filename):
        directory = self.log_dir
        filename = filename.replace('/', os.sep)
        index = 0
        while True:
            index += 1
            formatted = self._format_path(filename, index)
            path = os.path.join(directory, formatted)
            # filename didn't contain {index} or unique path was found
            if formatted == filename or not os.path.exists(path):
                self._create_directory(path)
                self._embed_to_log_as_file(path, 800)
                return path

    def _create_directory(self, path):
        target_dir = os.path.dirname(path)
        if not os.path.exists(target_dir):
            os.makedirs(target_dir)

    def _embed_to_log_as_file(self, path, width):
        # Image is shown on its own row and thus previous row is closed on
        # purpose. Depending on Robot's log structure is a bit risky.
        self.info('</td></tr><tr><td colspan="3">'
                  '<a href="{src}"><img src="{src}" width="{width}px"></a>'
                  .format(src=get_link_path(path, self.log_dir), width=width), html=True)

    def info(self, msg, html=False):
        logger.info(msg, html)
