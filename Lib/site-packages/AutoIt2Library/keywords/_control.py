from AutoIt2Library import control as cl
from AutoIt2Library.keywords import ornament

class _Control:
    @ornament.execute_its_own_function(cl)
    def control_click(self, title, control, **kwargs):
        """

        :param title:
        :param text:
        :param control:
        :param button:
        :param clicks:
        :param x:
        :param y:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_click_by_handle(self, hwnd, h_ctrl, **kwargs):
        """

        :param handle:
        :param kwargs:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_command(self, title, control, command, buf_size=256, **kwargs):
        """

        :param title:
        :param control:
        :param command:
        :param extra:
        :param buf_size:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_command_by_handle(self, hwnd, h_ctrl, command, buf_size=256, **kwargs):
        """

        :param hwnd:
        :param h_ctrl:
        :param command:
        :param kwargs:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_list_view(self, title, control, command, **kwargs):
        """

        :param title:
        :param control:
        :param command:
        :param args:
        :param kwargs:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_list_view_by_handle(self, hwnd, h_ctrl, command, **kwargs):
        """

        :param hwnd:
        :param h_ctrl:
        :param command:
        :param kwargs:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_disable(self, title, control, **kwargs):
        """

        :param title:
        :param control:
        :param kwargs:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_disable_by_handle(self, hwnd, h_ctrl):
        """

        :param hwnd:
        :param h_ctrl:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_enable(self, title, control, **kwargs):
        """

        :param title:
        :param control:
        :param kwargs:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_enable_by_handle(self, hwnd, h_ctrl):
        """

        :param hwnd:
        :param h_ctrl:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_focus(self, title, control, **kwargs):
        """

        :param title:
        :param control:
        :param kwargs:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_focus_by_handle(self, hwnd, h_ctrl):
        """

        :param hwnd:
        :param h_ctrl:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_get_focus(self, title, **kwargs):
        """

        :param title:
        :param kwargs:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_get_focus_by_handle(self, hwnd, buf_size=256):
        """

        :param hwnd:
        :param buf_size:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_get_handle(self, hwnd, control):
        """

        :param hwnd:
        :param control:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_get_handle_as_text(self, title, control, **kwargs):
        """

        :param title:
        :param control:
        :param kwargs:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_get_pos(self, title, control, text=""):
        """

        :param title:
        :param control:
        :param text:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_get_pos_by_handle(self, hwnd, h_ctrl):
        """

        :param hwnd:
        :param h_ctrl:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_get_text(self, title, control, **kwargs):
        """

        :param title:
        :param control:
        :param kwargs:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_get_text_by_handle(self, hwnd, h_ctrl, **kwargs):
        """

        :param hwnd:
        :param h_ctrl:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_hide(self, title, control, **kwargs):
        """

        :param title:
        :param control:
        :param kwargs:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_hide_by_handle(self, hwnd, h_ctrl):
        """

        :param hwnd:
        :param h_ctrl:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_move(self, title, control, x, y, width=-1, height=-1, **kwargs):
        """

        :param title:
        :param control:
        :param x:
        :param y:
        :param kwargs:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_move_by_handle(self, hwnd, h_ctrl, x, y, width=-1, height=-1):
        """

        :param hwnd:
        :param h_ctrl:
        :param x:
        :param y:
        :param width:
        :param height:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_send(self, title, control, send_text, mode=0, **kwargs):
        """

        :param title:
        :param control:
        :param send_text:
        :param mode:
        flag = 0 (self, default), Text contains special characters like + to indicate
            SHIFT and {LEFT} to indicate left arrow.
        flag = 1, keys are sent raw.
        :param kwargs:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_send_by_handle(self, hwnd, h_ctrl, send_text, mode=0):
        """

        :param hwnd:
        :param h_ctrl:
        :param send_text:
        :param mode:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_set_text(self, title, control, control_text, **kwargs):
        """

        :param title:
        :param control:
        :param control_text:
        :param kwargs:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_set_text_by_handle(self, hwnd, h_ctrl, control_text):
        """

        :param hwnd:
        :param h_ctrl:
        :param control_text:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_show(self, title, control, **kwargs):
        """

        :param title:
        :param control:
        :param kwargs:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_show_by_handle(self, hwnd, h_ctrl):
        """

        :param hwnd:
        :param h_ctrl:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_tree_view(self, title, control, command, **kwargs):
        """

        :param title:
        :param control:
        :param command:
        :param args:
        :param kwargs:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def control_tree_view_by_handle(self, hwnd, h_ctrl, command, **kwargs):
        """

        :param hwnd:
        :param h_ctrl:
        :param command:
        :param kwargs:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def statusbar_get_text(self, title, text="", part=1, buf_size=256):
        """

        :param title:
        :param text:
        :param part: The "part" number of the status bar to read - the default
            is 1. 1 is the first possible part and usually the one that contains
            the useful messages like "Ready" "Loading...", etc.
        :param buf_size:
        :return:
        """
        

    @ornament.execute_its_own_function(cl)
    def statusbar_get_text_by_handle(self, hwnd, part=1, buf_size=256):
        """

        :param hwnd:
        :param part:
        :param buf_size:
        :return:
        """
        
