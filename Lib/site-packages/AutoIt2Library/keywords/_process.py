from AutoIt2Library import process
from AutoIt2Library.keywords import ornament



def get_flag(flag):
    if hasattr(process.Properties, str(flag)):
        return getattr(process.Properties, str(flag))
    else:
        return flag


class _Process:
    @ornament.execute_its_own_function(process)
    def run(self, filename, work_dir="", show_flag=process.Properties.SW_SHOWNORMAL):
        """

        :param filename:
        :param work_dir:
        :param show_flag:
        :return:
        """

    @ornament.execute_its_own_function(process)
    def run_wait(self, filename, work_dir="", show_flag=process.Properties.SW_SHOWNORMAL):
        """

        :param filename:
        :param work_dir:
        :param show_flag:
        :return:
        """

    @ornament.execute_its_own_function(process)
    def process_close(self, process):
        """
        Terminates a named process.
        """

    @ornament.execute_its_own_function(process)
    def process_exists(self, process):
        """

        :param process:
        :return:
        """

    @ornament.execute_its_own_function(process)
    def process_set_priority(self, process, priority):
        """
        Changes the priority of a process
        :param process: The name or PID of the process to check.
        :param priority:A flag which determines what priority to set
            0 - Idle/Low
            1 - Below Normal (self, Not supported on Windows 95/98/ME)
            2 - Normal
            3 - Above Normal (self, Not supported on Windows 95/98/ME)
            4 - High
            5 - Realtime (self, Use with caution, may make the system unstable)
        :return:
        """

    @ornament.execute_its_own_function(process)
    def process_wait(self, process, timeout=0):
        """
        Pauses script execution until a given process exists.
        :param process:
        :param timeout:
        :return:
        """

    @ornament.execute_its_own_function(process)
    def process_wait_close(self, process, timeout=0):
        """
        Pauses script execution until a given process does not exist.
        :param process:
        :param timeout:
        :return:
        """

    @ornament.execute_its_own_function(process)
    def run_as(self, user, domain, password, filename, logon_flag=1, work_dir="",
               show_flag=process.Properties.SW_SHOWNORMAL):
        """
        Runs an external program.
        :param user: username The user name to use.
        :param domain: The domain name to use.
        :param password: The password to use.
        :param logon_flag: 0 = do not load the user profile, 1 = (self, default) load
            the user profile, 2 = use for net credentials only
        :param filename: The name of the executable (self, EXE, BAT, COM, or PIF) to run.
        :param work_dir: The working directory.
        :param show_flag: The "show" flag of the executed program:
            SW_HIDE = Hidden window
            SW_MINIMIZE = Minimized window
            SW_MAXIMIZE = Maximized window
        :return:
        """

    @ornament.execute_its_own_function(process)
    def run_as_wait(self, user, domain, password, filename, logon_flag=1, work_dir="",
                    show_flag=process.Properties.SW_SHOWNORMAL):
        """
        Runs an external program.
        :param user: username The user name to use.
        :param domain: The domain name to use.
        :param password: The password to use.
        :param logon_flag: 0 = do not load the user profile, 1 = (self, default) load
            the user profile, 2 = use for net credentials only
        :param filename: The name of the executable (self, EXE, BAT, COM, or PIF) to run.
        :param work_dir: The working directory.
        :param show_flag: The "show" flag of the executed program:
            SW_HIDE = Hidden window
            SW_MINIMIZE = Minimized window
            SW_MAXIMIZE = Maximized window
        :return:
        """

    @ornament.execute_its_own_function(process)
    def shutdown(self, code):
        """

        :param code: The shutdown code is a combination of the following values:
            0 = Logoff
            1 = Shutdown
            2 = Reboot
            4 = Force
            8 = Power down
        :return:
        """
