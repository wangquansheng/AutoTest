from AutoIt2Library import win
from AutoIt2Library.keywords import ornament
from AutoIt2Library.keywords import common
import win32api, win32con


class _Win:
    @ornament.execute_its_own_function(win)
    def win_activate(self, title, **kwargs):
        """
        Activates (gives focus to) a window.
        :param title:
        :param text:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_activate_by_handle(self, handle):
        """

        :param handle:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_active(self, title, **kwargs):
        """

        :param title:
        :param text:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_not_active(self, title, **kwargs):
        """

        :param title:
        :param text:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_active_by_handle(self, handle):
        """

        :param handle:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_close(self, title, **kwargs):
        """

        :param title:
        :param text:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_close_by_handle(self, handle):
        """

        :param handle:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_exists(self, title, **kwargs):
        """
        Checks to see if a specified window exists.
        :param title: The title of the window to check.
        :param text: The text of the window to check.
        :return: Returns 1 if the window exists, otherwise returns 0.
        """

    @ornament.execute_its_own_function(win)
    def win_not_exists(self, title, **kwargs):
        """
        Checks to see if a specified window not exists.
        :param title: The title of the window to check.
        :param text: The text of the window to check.
        :return: Returns 1 if the window exists, otherwise returns 0.
        """

    @ornament.execute_its_own_function(win)
    def win_exists_by_handle(self, handle):
        """

        :param handle:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_get_caret_pos(self, ):
        """
        Returns the coordinates of the caret in the foreground window
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_get_class_list(self, title, buf_size=200, **kwargs):
        """

        :param title:
        :param text:
        :param buf_size:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_get_class_list_by_handle(self, handle, buf_size=200):
        """

        :param handle:
        :param buf_size:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_get_client_size(self, title, **kwargs):
        """

        :param title:
        :param text:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_get_client_size_by_handle(self, handle):
        """

        :param handle:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_get_handle(self, title, **kwargs):
        """

        :param title:
        :param text:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_get_handle_as_text(self, title, buf_size=16, **kwargs):
        """

        :param title:
        :param text:
        :param buf_size:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_get_pos(self, title, **kwargs):
        """

        :param title:
        :param text:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_get_pos_by_handle(self, handle):
        """

        :param handle:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_get_process(self, title, **kwargs):
        """

        :param title:
        :param text:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_get_process_by_handle(self, handle):
        """

        :param handle:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_get_state(self, title, **kwargs):
        """
        Retrieves the state of a given window.
        :param title:
        :param text:
        :return:
        1 = Window exists
        2 = Window is visible
        4 = Windows is enabled
        8 = Window is active
        16 = Window is minimized
        32 = Windows is maximized
        """

    @ornament.execute_its_own_function(win)
    def win_get_state_by_handle(self, handle):
        """

        :param handle:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_get_text(self, title, buf_size=256, **kwargs):
        """

        :param title:
        :param text:
        :param buf_size:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_get_text_by_handle(self, handle, buf_size=256):
        """

        :param handle:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_get_title(self, title, buf_size=256, **kwargs):
        """

        :param title:
        :param text:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_get_title_by_handle(self, handle, buf_size=256):
        """

        :param handle:
        :param buf_size:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_kill(self, title, **kwargs):
        """

        :param title:
        :param text:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_kill_by_handle(self, handle):
        """

        :param handle:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_menu_select_item(self, title, *items, **kwargs):
        """
        Usage:
            win_menu_select_item(self, "[CLASS:Notepad]", "", u"文件(self, &F)", u"退出(self, &X)")
        :param title:
        :param text:
        :param items:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_menu_select_item_by_handle(self, handle, *items):
        """

        :param handle:
        :param items:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_minimize_all(self, ):
        """

        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_minimize_all_undo(self, ):
        """

        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_move(self, title, x, y, width=-1, height=-1, **kwargs):
        """

        :param title:
        :param text:
        :param x:
        :param y:
        :param width:
        :param height:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_move_by_handle(self, handle, x, y, width=-1, height=-1):
        """

        :param handle:
        :param x:
        :param y:
        :param width:
        :param height:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_set_on_top(self, title, flag=1, **kwargs):
        """

        :param title:
        :param flag: 1=set on top flag, 0 = remove on top flag
        :param kwargs:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_set_on_top_by_handle(self, handle, flag=1):
        """

        :param handle:
        :param flag:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_set_state(self, title, flag=win.properties.SW_SHOW, **kwargs):
        """

        :param title:
        :param flag: The "show" flag of the executed program:
            SW_HIDE = Hide window
            SW_SHOW = Shows a previously hidden window
            SW_MINIMIZE = Minimize window
            SW_MAXIMIZE = Maximize window
            SW_RESTORE = Undoes a window minimization or maximization
        :param kwargs:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_set_state_by_handle(self, handle, flag=win.properties.SW_SHOW):
        """

        :param handle:
        :param flag:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_set_title(self, title, new_title, **kwargs):
        """

        :param title:
        :param new_title:
        :param kwargs:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_set_title_by_handle(self, handle, new_title):
        """

        :param handle:
        :param new_title:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_set_trans(self, title, trans, **kwargs):
        """
        Sets the transparency of a window.
        :param title:
        :param trans: A number in the range 0 - 255. The larger the number,
            the more transparent the window will become.
        :param kwargs:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_set_trans_by_handle(self, handle, trans):
        """

        :param handle:
        :param trans:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_wait(self, title, timeout=0, **kwargs):
        """

        :param title:
        :param timeout:
        :param kwargs:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_wait_by_handle(self, handle, timeout):
        """

        :param handle:
        :param timeout:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_wait_active(self, title, timeout=0, **kwargs):
        """

        :param title:
        :param timeout:
        :param kwargs:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_wait_active_by_handle(self, handle, timeout):
        """

        :param handle:
        :param timeout:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_wait_close(self, title, timeout=0, **kwargs):
        """

        :param title:
        :param timeout:
        :param kwargs:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_wait_close_by_handle(self, handle, timeout):
        """

        :param handle:
        :param timeout:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_wait_not_active(self, title, timeout=0, **kwargs):
        """

        :param title:
        :param timeout:
        :param kwargs:
        :return:
        """

    @ornament.execute_its_own_function(win)
    def win_wait_not_active_by_handle(self, handle, timeout):
        """

        :param handle:
        :param timeout:
        :return:
        """

    def get_system_cx_screen(self):
        """
        得到屏幕的分辨率x
        :return:
        """
        return win32api.GetSystemMetrics(win32con.SM_CXSCREEN)

    def get_system_cy_screen(self):
        """
        得到屏幕的分辨率y
        :return:
        """
        return win32api.GetSystemMetrics(win32con.SM_CYSCREEN)

    def take_screenshot(self, savePath):
        """
        窗口截图
        :param savePath: 保存地址
        :return:
        """
        import time
        time.sleep(0.5)
        path = common._screenshot()._get_screenshot_path(savePath)
        if self.handle:
            try:
                (x1, y1, x2, y2) = self.win_get_pos(self.handle)
            except:
                self.handle = None
                return self.take_screenshot(savePath)
        else:
            x1, y1 = 0, 0
            x2 = self.get_system_cx_screen()
            y2 = self.get_system_cy_screen()
        try:
            from PIL import Image, ImageGrab
            img_ready = ImageGrab.grab((x1, y1, x2, y2))
            img_ready.save(path, "jpeg")
            return path

        except Exception as e:

            print(traceback.print_exc())
